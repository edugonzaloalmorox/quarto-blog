{
  "hash": "300dba9f2bf7c9069b5be91f44eb974f",
  "result": {
    "markdown": "---\ntitle: Extract information from atom files\nauthor: Edu Gonzalo-Almorox\ndate: '2023-09-14'\ntoc: true\ntoc-depth: 4\ntoc-title: Contents\nformat:\n  html:\n    code-fold: true\ncategories:\n  - atom\n  - rss\n  - Data Wrangling\nimage: images/rss_atom.png\n---\n\n![Pawel Czerwinski via Unsplash](images/cover.jpg)\n\nSometimes valuable information often comes in the form of Atom or RSS files, which are essentially plain text formatted in XML. These files serve as a means to distribute content as feeds, ensuring users have access to the latest updates. However, while these files excel at timely information delivery, they can be challenging to decipher and parse. In this blog, I will show how Python can be your key to effortlessly extracting essential insights from these data sources.\n\n## Atom files 101\n\nFirst, let's locate the data.\n\nIn this blog, we'll be exploring a valuable source of information: public contracts. In particular, we will use the open data regarding [public contracts](https://www.hacienda.gob.es/es-ES/GobiernoAbierto/Datos%20Abiertos/Paginas/LicitacionesContratante.aspx) released by the Spanish Ministry for Economic Affairs. These datasets are regularly updated, with new information becoming available each day throughout the month.\n\n### Deconstructing Atom files\n\nBefore diving into the data, it's essential to understand the structure of atom files. These files consist of two primary components: metadata and a set of entries.\n\n-   **Metadata** provide information about document's author (i.e. the Ministry), the domain's URI, the date of last update, and more\n\n-   On the other hand, **entries** contain detailed information about individual contracts, including contract IDs, prices, dates, and much more. These entries are the core of our data exploration journey.\n\n![](images/atom_structure.png)\n\n### Diving into the data\n\nTo read the data we require `atoma` and `feedparser` in Python. These tool enable us to load a `<class 'atoma.atom.AtomFeed'>` in the system that can be manipulated. This class has different arguments but the most interesting and the one that contains the relevant information is the `<entry>`. In our case, this class provides information about the different contracts (ID of the contract, price, when the contract was updated, etc... ) involving public institutions in Spain.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport atoma\nimport feedparser\n\nfeed = atoma.parse_atom_file('data/licitacionesPerfilesContratanteCompleto3.atom')\n\nprint(type(feed))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'atoma.atom.AtomFeed'>\n```\n:::\n:::\n\n\nThis class contains several entries that are associated with a contract. To understand how many entries are contained in the `.atom` file we can use the `length` attribute to show the number of entries nested in the .atom\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nprint(len(feed.entries))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n500\n```\n:::\n:::\n\n\n## Parsing the data\n\nOnce we have successfully read the data, the next step involves parsing the data so we can obtain contract- related information in a more organised and structured manner. Our approach queries each individual element that compose the `entry` component of the `feed.` For example, you can get a glimpse of the main elements of the contract by accessing the `summary.value` component of the entry.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n    print(feed.entries[0].summary.value)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nId licitación: 4270012027200; Órgano de Contratación: Jefatura de la Sección Económico-Administrativa 27 - Base Aérea de Getafe; Importe: 50377.14 EUR; Estado: RES\n```\n:::\n:::\n\n\n### Retrieving Information for all entries\n\nIn the code snippet provided earlier, we observed how to retrieve information for a single contract. However, as our data source comprises details on a sample of 500 public contracts, we need a more efficient approach. To accomplish this, we can define a function that systematically extracts meaningful information for each contract and organizes it into a structured data frame. We can then iterate through all the entries within the file.\n\nThe first part of the code (`get_values()`) extracts relevant information from the contract and stores it in a dictionary that is saved as a data frame. The last part (`clean_licitacion()`) splits the different elements of the contract:\n\n-   `id` of the contract\n\n-   `contractor` or institution that perceives the contract\n\n-   `price` of the contract\n\n-   `status` of the contract\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nimport pandas as pd\n\n\n\ndef get_values(feed, n):  \n    objeto = feed.entries[n].title.value\n    perfil_contratante = feed.entries[n].id_\n    date_update = feed.entries[n].updated\n    link = feed.entries[n].links[0].href\n    licitacion = feed.entries[n].summary.value\n    \n    # Check for missing values and replace them with empty strings\n    objeto = objeto if objeto else \"\"\n    perfil_contratante = perfil_contratante if perfil_contratante else \"\"\n    date_update = date_update if date_update else \"\"\n    link = link if link else \"\"\n    licitacion = licitacion if licitacion else \"\"\n    \n    \n\n    dict = {\n        'objeto': objeto,\n        'perfil_contratante': perfil_contratante,\n        'fecha_actualizacion': date_update,\n        'link': link,\n        'licitacion': licitacion\n    } \n    \n    dict_df = pd.DataFrame(dict,index=[0])\n    \n    return dict_df\n\n\ndef clean_licitacion(df):\n    \n    lic = df[['licitacion']]\n    # Split the 'licitacion' column into new columns: 'id', 'organo', 'importe', 'estado'\n    split_value = lic['licitacion'].str.split(';', expand=True)\n\n\n    lic = df\n    \n    df_new = pd.concat([df, split_value], axis=1)\n   \n    df_new['id_licitacion'] = df_new[0].str.replace('Id licitación: ', '')\n    df_new['organo'] = df_new[1].str.replace('Órgano de Contratación: ', '')\n    df_new['importe'] = df_new[2].str.replace('Importe: ', '')\n    df_new['importe'] = df_new['importe'].str.replace(' EUR', '')\n    df_new['estado'] = df_new[3].str.replace('Estado: ', '')\n  \n     \n    \n    df_new = df_new[['objeto', 'perfil_contratante', 'fecha_actualizacion', 'link', 'id_licitacion', 'organo', 'importe', 'estado']]\n\n    return(df_new)\n\n```\n:::\n\n\nThis code snippet loops through all the entries in the atom file.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nlst_df = []\nlst = []\nn_values = list(range(1, len(feed.entries)))\nfor n in n_values:\n            dict_df = get_values(feed, n)\n            lst.append(dict_df)\n\n\nresult_df = pd.concat(lst, ignore_index=True)\n\nfinal_df = clean_licitacion(result_df)\nlst_df.append(final_df)\n\n\n        # Create the master_df by concatenating all the DataFrames\nmaster_df = pd.concat(lst_df, ignore_index=True)\nmaster_df.head(3)\n\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>objeto</th>\n      <th>perfil_contratante</th>\n      <th>fecha_actualizacion</th>\n      <th>link</th>\n      <th>id_licitacion</th>\n      <th>organo</th>\n      <th>importe</th>\n      <th>estado</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Suministro de energía eléctrica en el Centro d...</td>\n      <td>https://contrataciondelestado.es/sindicacion/l...</td>\n      <td>2013-01-11 09:35:38.409000+01:00</td>\n      <td>https://contrataciondelestado.es/wps/poc?uri=d...</td>\n      <td>2103/0109</td>\n      <td>Dirección General del Instituto de Cinematogr...</td>\n      <td>59722.28</td>\n      <td>RES</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Servicio de duplicado de copias de películas, ...</td>\n      <td>https://contrataciondelestado.es/sindicacion/l...</td>\n      <td>2013-01-11 09:34:24.393000+01:00</td>\n      <td>https://contrataciondelestado.es/wps/poc?uri=d...</td>\n      <td>2103/0133</td>\n      <td>Dirección General del Instituto de Cinematogr...</td>\n      <td>64000</td>\n      <td>RES</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Gas Licuado Propano 2013/2014</td>\n      <td>https://contrataciondelestado.es/sindicacion/l...</td>\n      <td>2013-01-11 09:16:16.416000+01:00</td>\n      <td>https://contrataciondelestado.es/wps/poc?uri=d...</td>\n      <td>204152041512012100</td>\n      <td>Sección de Asuntos Económicos de la Academia ...</td>\n      <td>49586.78</td>\n      <td>RES</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Visualise the data\n\nOnce we have parsed and structured the information, we can make some analysis and obtain some insights. For instance, we can explore what the top institutions by the value of their contracts are.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nimport plotly.graph_objs as go\n\n\nmaster_df['importe'] = pd.to_numeric(master_df['importe'], errors='coerce')\ngrouped_data = master_df.groupby('organo')['importe'].sum().reset_index()\n\ngrouped_data = grouped_data.sort_values(by='importe', ascending=False)\ntop_contractors = grouped_data.head(10)\n\nfig = go.Figure(data=[go.Pie(labels=top_contractors['organo'], values=top_contractors['importe'],\n                             hole=0.5, pull=[0.1, 0])])\n\n\n\nfig.update_layout(\n    title=dict(text=\"Top 10 contractors in January 2013\", x = 0.45, y=0.9), \n    legend=dict(orientation=\"h\", y=-5)\n)\n\n# Show the plot\nfig.show()\n\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"4a0aeabc-241b-4a42-8166-94513d96dfff\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"4a0aeabc-241b-4a42-8166-94513d96dfff\")) {                    Plotly.newPlot(                        \"4a0aeabc-241b-4a42-8166-94513d96dfff\",                        [{\"hole\":0.5,\"labels\":[\" Gerencia de la Entidad Estatal de Derecho P\\u00fablico Trabajo Penitenciario y Formaci\\u00f3n para el Empleo\",\" Consejo de Administraci\\u00f3n de Aguas de las Cuencas de Espa\\u00f1a, S.A. (ACUAES)\",\" Subdirecci\\u00f3n de Compras de la Sociedad Estatal Correos y Tel\\u00e9grafos S.A.\",\" Subsecretar\\u00eda del Ministerio de la Presidencia\",\" Consejo de Administraci\\u00f3n de la Autoridad Portuaria de Las Palmas\",\" Presidencia de la Autoridad Portuaria de Bilbao\",\" Jefatura de Asuntos Econ\\u00f3micos del Mando de Apoyo Log\\u00edstico\",\" Secretar\\u00eda General de Instituciones Penitenciarias\",\" Presidencia del Consejo de Administraci\\u00f3n de Aguas de las Cuencas Mediterr\\u00e1neas, S.A. (ACUAMED)\",\" Empresa Nacional de Residuos Radiactivos (ENRESA)\"],\"pull\":[0.1,0],\"values\":[60043993.15,39670656.97,38269887.0,35450338.84,28781278.19,20171205.09,15726779.51,13825796.25,12855006.77,10039360.0],\"type\":\"pie\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"title\":{\"text\":\"Top 10 contractors in January 2013\",\"x\":0.45,\"y\":0.9},\"legend\":{\"orientation\":\"h\",\"y\":-5}},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('4a0aeabc-241b-4a42-8166-94513d96dfff');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n:::\n:::\n\n\n## Conclusion\n\nIn this tutorial you have seen how to parse and represent information from atom files using Python. This analysis can be replicated to the case of rss files.\n\nI hope you find it useful. Let me know in the comments if you have any questions or need further clarification.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n<script type=\"text/javascript\">\nwindow.PlotlyConfig = {MathJaxConfig: 'local'};\nif (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\nif (typeof require !== 'undefined') {\nrequire.undef(\"plotly\");\nrequirejs.config({\n    paths: {\n        'plotly': ['https://cdn.plot.ly/plotly-2.24.1.min']\n    }\n});\nrequire(['plotly'], function(Plotly) {\n    window._Plotly = Plotly;\n});\n}\n</script>\n\n"
      ]
    }
  }
}